<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>自动发邮件的方法</title>
      <link href="/2020/05/24/zi-dong-fa-you-jian-de-fang-fa/"/>
      <url>/2020/05/24/zi-dong-fa-you-jian-de-fang-fa/</url>
      
        <content type="html"><![CDATA[<p>很多年前尝试配置过 sendmail 服务，痛苦的要死，最后也没配成功，从此对服务器端配置邮件相关服务存下了心理阴影。</p><p>最近需要配置自动发邮件，想着这一关总要过去，于是开始重新了解学习如何做，没想到现在用新软件已经可以出奇的简单。</p><p>所以赶紧记录下来：</p><p>使用的软件是 ssmtp，主要有两个配置文件，以我用的 qq 企业邮箱为例：</p><pre><code>## Config file for sSMTP sendmail## The person who gets all mail for userids &lt; 1000# Make this empty to disable rewriting.root=sdsang@taosdata.com# The place where the mail goes. The actual machine name is required no# MX records are consulted. Commonly mailhosts are named mail.domain.commailhub=smtp.exmail.qq.com:587# Where will the mail seem to come from?rewriteDomain=hostname=YOUREMAILADDR#UseSTARTTLS=YESAuthUser=YOUREMAILADDRAuthPass=YOUREMAILPASSWDUseTLS=YESUseSTARTTLS=YES# The full hostname#hostname=perftest.ldj05avpeqiepodwxvbq0py2oh.hx.internal.cloudapp.net# Are users allowed to set their own From: address?# YES - Allow the user to specify their own From: address# NO - Use the system generated From: addressFromLineOverride=YES</code></pre><p>/etc/ssmtp/revaliases</p><pre><code># sSMTP aliases## Format:    local_account:outgoing_address:mailhub## Example: root:your_login@your.domain:mailhub.your.domain[:port]# where [:port] is an optional port number that defaults to 25.root:YOUREMAILADDR:smtp.exmail.qq.com:587</code></pre><p>发送邮件的脚本示例：</p><pre><code>    receiver=&quot;sangshuduo@gmail.com, SOMEONEEMAIL&quot;    echo -e &quot;to: ${receiver}\nsubject: SUBJECT TEXT\n&quot; | \        (cat - &amp;&amp; uuencode ATTCHED_FILE1_NAME ATTACHMENT_FILE1_NAME)| \        (cat - &amp;&amp; uuencode ATTCHED_FILE2_NAME ATTACHMENT_FILE2_NAME)| \        (cat - &amp;&amp; uuencode ATTCHED_FILE3_NAME ATTACHMENT_FILE3_NAME)| \        ssmtp &quot;${receiver}&quot;</code></pre><p>当然也有一些没研究明白的问题，比如如何写 HTML 邮件 body，并被几种主流客户端认对，这里吐槽一下， gmail 识别出来的， Outlook 可能识别有问题，Windows 10 自带的 Mail 干脆不认识附件，而且18年就被用户在官方论坛上吐槽的 Bug 到现在还存在。</p>]]></content>
      
      
      <categories>
          
          <category> CI-CD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssmtp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 cmake 中为个别文件单独指定编译选项的方法</title>
      <link href="/2020/04/06/zai-cmake-zhong-wei-ge-bie-wen-jian-dan-du-zhi-ding-bian-yi-xuan-xiang-de-fang-fa/"/>
      <url>/2020/04/06/zai-cmake-zhong-wei-ge-bie-wen-jian-dan-du-zhi-ding-bian-yi-xuan-xiang-de-fang-fa/</url>
      
        <content type="html"><![CDATA[<p>搜能搜到 StackOverflow 上很多回复，实际用还是尝试了一下午。<br>重点是要在合适的目录下的 CMakeLists.txt 中改，并且要带合适的路径。<br>因为折腾的时间比较多，赶紧记下来，免得想不起来。</p><p>SET_SOURCE_FILES_PROPERTIES(src/sql.c PROPERTIES COMPILE_FLAGS -w)</p>]]></content>
      
      
      <categories>
          
          <category> CI-CD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> compiler </tag>
            
            <tag> cmake </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>strncpy 的小实验</title>
      <link href="/2020/04/03/strncpy-de-xiao-shi-yan/"/>
      <url>/2020/04/03/strncpy-de-xiao-shi-yan/</url>
      
        <content type="html"><![CDATA[<p>最近用 Coverity Scan 扫描代码，其中对 strncpy 的使用做了警告<br><img src="/2020/04/03/strncpy-de-xiao-shi-yan/IMG_4269.JPG" alt=""></p><p>之前知道 C 语言里字符操作坑很多。很多函数不安全，要用带 n 的函数。以为 strcpy 不安全，可以用 strncpy。但实际上 strncpy 用的不小心也不是那么安全。</p><p>手册说明：</p><pre><code>DESCRIPTION     The stpcpy() and strcpy() functions copy the string src to dst (including the terminating `\0&#39; character.)     The stpncpy() and strncpy() functions copy at most len characters from src into dst.  If src is less than len     characters long, the remainder of dst is filled with `\0&#39; characters.  Otherwise, dst is not terminated.     The source and destination strings should not overlap, as the behavior is undefined.</code></pre><p>于是做了个小实验</p><pre><code>#include &lt;stdio.h&gt;#include &lt;string.h&gt;#include &lt;stdlib.h&gt;typedef struct dstBuf {    char begin[6];    char dst[6];    char end[6];} Buf;int main(){    char src[8] = &quot;abcdefgh&quot;;    Buf *buf = malloc(sizeof(Buf));    memset(buf, &#39;#&#39;, sizeof(Buf));    Buf *buf1 = malloc(sizeof(Buf));    memset(buf1, &#39;#&#39;, sizeof(Buf));    Buf *buf2 = malloc(sizeof(Buf));    memset(buf2, &#39;#&#39;, sizeof(Buf));    printf(&quot;strncpy n-1 before: buf-&gt;begin is %s\n&quot;, buf-&gt;begin);    printf(&quot;strncpy n-1 before: buf-&gt;dst is %s\n&quot;, buf-&gt;dst);    printf(&quot;strncpy n-1 before: buf-&gt;end is %s\n&quot;, buf-&gt;end);    strncpy(buf-&gt;dst, src, 5);    printf(&quot;strncpy n-1 after: buf-&gt;begin is %s\n&quot;, buf-&gt;begin);    printf(&quot;strncpy n-1 after: buf-&gt;dst is %s\n&quot;, buf-&gt;dst);    printf(&quot;strncpy n-1 after: buf-&gt;end is %s\n&quot;, buf-&gt;end);    free(buf);    printf(&quot;strncpy n before: buf1-&gt;begin is %s\n&quot;, buf1-&gt;begin);    printf(&quot;strncpy n before: buf1-&gt;dst is %s\n&quot;, buf1-&gt;dst);    printf(&quot;strncpy n before: buf1-&gt;end is %s\n&quot;, buf1-&gt;end);    strncpy(buf1-&gt;dst, src, 6);    printf(&quot;strncpy n after: buf1-&gt;begin is %s\n&quot;, buf1-&gt;begin);    printf(&quot;strncpy n after: buf1-&gt;dst is %s\n&quot;, buf1-&gt;dst);    printf(&quot;strncpy n after: buf1-&gt;end is %s\n&quot;, buf1-&gt;end);    free(buf1);    printf(&quot;strcpy before: buf2-&gt;begin is %s\n&quot;, buf2-&gt;begin);    printf(&quot;strcpy before: buf2-&gt;dst is %s\n&quot;, buf2-&gt;dst);    printf(&quot;strcpy before: buf2-&gt;end is %s\n&quot;, buf2-&gt;end);    strcpy(buf2-&gt;dst, src);    printf(&quot;strcpy after: buf2-&gt;begin is %s\n&quot;, buf2-&gt;begin);    printf(&quot;strcpy after: buf2-&gt;dst is %s\n&quot;, buf2-&gt;dst);    printf(&quot;strcpy after: buf2-&gt;end is %s\n&quot;, buf2-&gt;end);    free(buf2);    return 0;}</code></pre><p>OS X / clang编译输出结果：</p><pre><code>$ ./test-strncpystrncpy n-1 before: buf-&gt;begin is ##################strncpy n-1 before: buf-&gt;dst is ############strncpy n-1 before: buf-&gt;end is ######strncpy n-1 after: buf-&gt;begin is ######abcde#######strncpy n-1 after: buf-&gt;dst is abcde#######strncpy n-1 after: buf-&gt;end is ######strncpy n before: buf1-&gt;begin is ##################strncpy n before: buf1-&gt;dst is ############strncpy n before: buf1-&gt;end is ######strncpy n after: buf1-&gt;begin is ######abcdef######strncpy n after: buf1-&gt;dst is abcdef######strncpy n after: buf1-&gt;end is ######strcpy before: buf2-&gt;begin is ##################strcpy before: buf2-&gt;dst is ############strcpy before: buf2-&gt;end is ######[1]    85196 illegal hardware instruction  ./test-strncpy</code></pre><p>Linux (Ubuntu 20.04) gcc 编译结果（居然略有不同）：</p><pre><code>$ ./test-strncpystrncpy n-1 before: buf-&gt;begin is ##################strncpy n-1 before: buf-&gt;dst is ############strncpy n-1 before: buf-&gt;end is ######strncpy n-1 after: buf-&gt;begin is ######abcde#######strncpy n-1 after: buf-&gt;dst is abcde#######strncpy n-1 after: buf-&gt;end is ######strncpy n before: buf1-&gt;begin is ##################strncpy n before: buf1-&gt;begin is ############strncpy n before: buf1-&gt;end is ######strncpy n after: buf1-&gt;begin is ######abcdef######strncpy n after: buf1-&gt;dst is abcdef######strncpy n after: buf1-&gt;end is ######strcpy before: buf2-&gt;begin is ##################strcpy before: buf2-&gt;dst is ############strcpy before: buf2-&gt;end is ######strcpy after: buf2-&gt;begin is ######abcdefghstrcpy after: buf2-&gt;dst is abcdefghstrcpy after: buf2-&gt;end is gh</code></pre><p>直接看结果，就不解释了</p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> gcc </tag>
            
            <tag> clang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用 Travis 进行 GO 项目的 CI 自动测试</title>
      <link href="/2020/03/29/ru-he-shi-yong-travis-jin-xing-go-xiang-mu-de-ci-zi-dong-ce-shi/"/>
      <url>/2020/03/29/ru-he-shi-yong-travis-jin-xing-go-xiang-mu-de-ci-zi-dong-ce-shi/</url>
      
        <content type="html"><![CDATA[<p>写了一个小程序模拟类似的 CGO 项目如何利用 CI 服务进行自动测试。</p><p>代码在： <a href="https://github.com/sangshuduo/cgo_ci_helloworld" target="_blank" rel="noopener">https://github.com/sangshuduo/cgo_ci_helloworld</a></p><p>由于 Go 从语言层面内置原生测试框架，仅需要添加很少的代码就可以快速测试一段需求代码。可以不必像 C/C++ 需要单独集成第三方的测试框架。</p><p>go test 命令，会自动读取源码目录下面名为 *_test.go 的文件，生成并运行测试用的可执行文件。</p><h1 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h1><pre><code>cgo_ci_helloworld git:(develop) tree.├── .travis.yml├── LICENSE├── README.md├── calculation│   ├── div.go│   └── div_test.go├── go.mod├── go.sum└── main.go1 directory, 7 files</code></pre><ul><li><h1 id="单元测试代码"><a href="#单元测试代码" class="headerlink" title="单元测试代码"></a>单元测试代码</h1></li></ul><p>分别使用 10, 2 和 10, 0作为除法函数参数传入，检查除法函数结果，如果不符合预期抛出错误。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Test_Division</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token string">``</span><span class="token keyword">if</span><span class="token string">` `</span>i<span class="token punctuation">,</span> e <span class="token operator">:=</span> <span class="token function">Division</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token number">2</span> <span class="token operator">||</span> e <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>    <span class="token string">``</span>t<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">``</span><span class="token string">"Fail to pass"</span><span class="token string">``</span><span class="token punctuation">)</span>  <span class="token string">``</span><span class="token punctuation">}</span> <span class="token string">``</span><span class="token keyword">else</span><span class="token string">` `</span><span class="token punctuation">{</span>    <span class="token string">``</span>t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">``</span><span class="token string">"Pass"</span><span class="token string">``</span><span class="token punctuation">)</span>  <span class="token string">``</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">Test_Division_Zero</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token string">``</span><span class="token keyword">if</span><span class="token string">` `</span><span class="token boolean">_</span><span class="token punctuation">,</span> e <span class="token operator">:=</span> <span class="token function">Division</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> e <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>    <span class="token string">``</span>t<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">``</span><span class="token string">"Should not go here."</span><span class="token string">``</span><span class="token punctuation">)</span>  <span class="token string">``</span><span class="token punctuation">}</span> <span class="token string">``</span><span class="token keyword">else</span><span class="token string">` `</span><span class="token punctuation">{</span>    <span class="token string">``</span>t<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">``</span><span class="token string">"Check zero correctlly."</span><span class="token string">``</span><span class="token punctuation">)</span>  <span class="token string">``</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li><h1 id="travis-配置详解"><a href="#travis-配置详解" class="headerlink" title="travis 配置详解"></a>travis 配置详解</h1></li></ul><p>其中 .travis.yml 定义在 Travis 如何构建测试环境和测试过程。</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Configuration</span><span class="token comment" spellcheck="true">#</span><span class="token key atrule">language</span><span class="token punctuation">:</span> go<span class="token key atrule">os</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> linux<span class="token key atrule">addons</span><span class="token punctuation">:</span>  <span class="token key atrule">apt</span><span class="token punctuation">:</span>    <span class="token key atrule">packages</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> build<span class="token punctuation">-</span>essential      <span class="token punctuation">-</span> cmake<span class="token key atrule">go</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> 1.13.x<span class="token key atrule">env</span><span class="token punctuation">:</span> GO111MODULE=on<span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># clone TDenine source code to build and install to system to provide library and header file for CGO reference</span><span class="token comment" spellcheck="true">#</span><span class="token key atrule">before_install</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token punctuation">|</span><span class="token punctuation">-</span>    case $TRAVIS_OS_NAME in      linux)        export CURR_DIR=`pwd`        export TDENGINE_DIR=$HOME/TDengine        git clone <span class="token punctuation">-</span><span class="token punctuation">-</span>depth 1 https<span class="token punctuation">:</span>//github.com/taosdata/TDengine $TDENGINE_DIR        cd $TDENGINE_DIR        mkdir build        cd build        cmake ..        cmake <span class="token punctuation">-</span><span class="token punctuation">-</span>build .        make install        cd $CURR_DIR        ;;    esac<span class="token key atrule">install</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> mkdir <span class="token punctuation">-</span>p $GOPATH/src/golang.org/x  <span class="token punctuation">-</span> git clone <span class="token punctuation">-</span><span class="token punctuation">-</span>depth 1 https<span class="token punctuation">:</span>//github.com/golang/lint.git $GOPATH/src/golang.org/x/lint  <span class="token punctuation">-</span> go get <span class="token punctuation">-</span>u golang.org/x/lint/golint<span class="token key atrule">git</span><span class="token punctuation">:</span>  <span class="token key atrule">depth</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token key atrule">before_script</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> curl <span class="token punctuation">-</span>L https<span class="token punctuation">:</span>//codeclimate.com/downloads/test<span class="token punctuation">-</span>reporter/test<span class="token punctuation">-</span>reporter<span class="token punctuation">-</span>latest<span class="token punctuation">-</span>linux<span class="token punctuation">-</span>amd64 <span class="token punctuation">></span> ./cc<span class="token punctuation">-</span>test<span class="token punctuation">-</span>reporter  <span class="token punctuation">-</span> chmod +x ./cc<span class="token punctuation">-</span>test<span class="token punctuation">-</span>reporter  <span class="token punctuation">-</span> ./cc<span class="token punctuation">-</span>test<span class="token punctuation">-</span>reporter before<span class="token punctuation">-</span>build<span class="token key atrule">script</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> golint ./<span class="token punctuation">...</span>  <span class="token punctuation">-</span> go test <span class="token punctuation">-</span>v ./<span class="token punctuation">...</span> <span class="token punctuation">-</span>bench=. <span class="token punctuation">-</span>cpu=1<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">16</span>  <span class="token punctuation">-</span> go build  <span class="token punctuation">-</span> go test <span class="token punctuation">-</span>coverprofile c.out ./<span class="token punctuation">...</span><span class="token key atrule">after_script</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> ./cc<span class="token punctuation">-</span>test<span class="token punctuation">-</span>reporter after<span class="token punctuation">-</span>build <span class="token punctuation">-</span><span class="token punctuation">-</span>exit<span class="token punctuation">-</span>code $TRAVIS_TEST_RESULT<span class="token key atrule">notifications</span><span class="token punctuation">:</span>  <span class="token key atrule">email</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> sangshuduo@gmail.com</code></pre><ul><li><h1 id="代码质量检查："><a href="#代码质量检查：" class="headerlink" title="代码质量检查："></a>代码质量检查：</h1></li></ul><p>使用 golint 对 go 代码进行质量检查</p><pre><code>$ golint ./...main.go:4:2: should not use dot importsThe command &quot;golint ./...&quot; exited with 0.</code></pre><ul><li><h1 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h1></li></ul><p>在 calculation 目录中针对基础功能函数定义单元测试函数，使用 go test 执行进行测试</p><pre><code>$ go test -v ./... -bench=. -cpu=1,2,4,16go: downloading github.com/taosdata/driver-go v0.0.0-20200311072652-8c58c512b6acgo: downloading github.com/mattn/go-sqlite3 v2.0.3+incompatiblego: extracting github.com/taosdata/driver-go v0.0.0-20200311072652-8c58c512b6acgo: extracting github.com/mattn/go-sqlite3 v2.0.3+incompatiblego: finding github.com/mattn/go-sqlite3 v2.0.3+incompatiblego: finding github.com/taosdata/driver-go v0.0.0-20200311072652-8c58c512b6ac?       github.com/sangshuduo/cgo_ci_helloworld [no test files]=== RUN   Test_Division--- PASS: Test_Division (0.00s)    div_test.go:12: Pass=== RUN   Test_Division_Zero--- PASS: Test_Division_Zero (0.00s)    div_test.go:20: Check zero correctlly.=== RUN   Test_Division--- PASS: Test_Division (0.00s)    div_test.go:12: Pass=== RUN   Test_Division_Zero--- PASS: Test_Division_Zero (0.00s)    div_test.go:20: Check zero correctlly.=== RUN   Test_Division--- PASS: Test_Division (0.00s)    div_test.go:12: Pass=== RUN   Test_Division_Zero--- PASS: Test_Division_Zero (0.00s)    div_test.go:20: Check zero correctlly.=== RUN   Test_Division--- PASS: Test_Division (0.00s)    div_test.go:12: Pass=== RUN   Test_Division_Zero--- PASS: Test_Division_Zero (0.00s)    div_test.go:20: Check zero correctlly.=== RUN   Example_Division--- PASS: Example_Division (0.00s)</code></pre><ul><li><h1 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h1></li></ul><p>go test 可以添加 -bench 和 -cpu 等参数进行不同 CPU 个数情况下的代码执行时间测量</p><pre><code>goos: linuxgoarch: amd64pkg: github.com/sangshuduo/cgo_ci_helloworld/calculationBenchmark_Division          1000000000           0.606 ns/opBenchmark_Division-2        1000000000           0.607 ns/opBenchmark_Division-4        1000000000           0.599 ns/opBenchmark_Division-16       1000000000           0.597 ns/opPASSok      github.com/sangshuduo/cgo_ci_helloworld/calculation 2.675sThe command &quot;go test -v ./... -bench=. -cpu=1,2,4,16&quot; exited with 0.</code></pre><ul><li><h1 id="测试覆盖率"><a href="#测试覆盖率" class="headerlink" title="测试覆盖率"></a>测试覆盖率</h1></li></ul><p>结合 Travis 和 CodeClimate 服务得到测试覆盖率结果</p><pre><code>$ go test -coverprofile c.out ./...?    github.com/sangshuduo/cgo_ci_helloworld [no test files]ok   github.com/sangshuduo/cgo_ci_helloworld/calculation 0.002s coverage: 100.0% of statementsThe command &quot;go test -coverprofile c.out ./...&quot; exited with 0.after_script0.58s$ ./cc-test-reporter after-build --exit-code $TRAVIS_TEST_RESULTTest report uploaded successfully to Code Climate</code></pre><p><img src="./image2020-3-29_21-14-43.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> CI-CD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
            <tag> travis </tag>
            
            <tag> CodeClimate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins 插件镜像 配置方法</title>
      <link href="/2020/02/24/jenkins-cha-jian-jing-xiang-pei-zhi-fang-fa/"/>
      <url>/2020/02/24/jenkins-cha-jian-jing-xiang-pei-zhi-fang-fa/</url>
      
        <content type="html"><![CDATA[<p>网上有大量的如果加速Jenkins插件安装的博客帖子，怀疑大部分都没有自己验证过，抄来抄去。</p><p>实际真正的步骤应该是：</p><p>基础发行版是Ubuntu 20.04</p><pre><code>$ wget -q -O - https://pkg.jenkins.io/debian/jenkins-ci.org.key | sudo apt-key add -$ sudo sh -c &#39;echo deb http://pkg.jenkins.io/debian-stable binary/ &gt; /etc/apt/sources.list.d/jenkins.list&#39;$ sudo apt-get update$ sudo apt-get install openjdk-8-jre$ sudo apt-get install jenkins</code></pre><p>默认系统里没有JDK/JRE</p><p>然后修改hudson.model.UpdateCenter.xml</p><pre><code>$ cd /var/lib/jenkins/$ vim hudson.model.UpdateCenter.xml</code></pre><p>替换原来update-center.json那一行为<a href="https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json</a></p><p>然后在浏览器里访问localhost:8080，假设没有修改默认端口8080。然后用 /var/lib/jenkins/secrets/initAdminPassword里的密码登陆，需要用root账号看initAdminPassword里的内容。</p><p>然后在选择安装默认插件还是自选插件的界面，不要点，切换到terminal，修改updates目录里的default.json，注意之前是没有updates这个目录的。</p><pre><code>$ sed -i &#39;s/http:\/\/updates.jenkins-ci.org\/download/https:\/\/mirrors.tuna.tsinghua.edu.cn\/jenkins/g&#39; default.json &amp;&amp; sed -i &#39;s/http:\/\/www.google.com/https:\/\/www.baidu.com/g&#39; default.json</code></pre><p>然后重启jenkins：</p><pre><code>$ sudo service jenkins restart</code></pre><p>然后在浏览器里再刷新localhost:8080，然后再安装插件，这个时候就刷刷的快了。</p><p>其他发行版或者使用配置好的Docker安装方式这里不讨论。理论上不同发行版命令和文件位置不一样，原理应该没区别。Docker是有人配置好的，自己不需要配，方便是方便，但是可能原Docker里的基础发行版是别人定的。</p>]]></content>
      
      
      <categories>
          
          <category> CI-CD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在Windows 10家庭版安装Docker for Windows</title>
      <link href="/2020/02/18/ru-he-zai-windows-10-jia-ting-ban-an-zhuang-docker-for-windows/"/>
      <url>/2020/02/18/ru-he-zai-windows-10-jia-ting-ban-an-zhuang-docker-for-windows/</url>
      
        <content type="html"><![CDATA[<p>前面写到买了台无法装Linux双系统的新电脑，预装Windows 10家庭版。因为要折腾，即使无法双系统启动原生Linux，也要想办法折腾其他方法装Linux。装了VirtualBox跑Ubuntu，也装了Linux Bash on Ubuntu On Windows 10。之前还装过Docker for Windows，没想到跑不起来，说家庭版不能跑。骂微软鸡贼，非要区分各种版本，做功能阉割。</p><p>今天偶然发现有人鼓捣出hack方法，让Docker以为是Professional版本。于是也跟着探索了一下。最后结合中外高人Blog，也鼓捣成了。</p><p>代码如下：</p><pre><code>pushd &quot;%~dp0&quot;dir /b %SystemRoot%\servicing\Packages\*Hyper-V*.mum &gt;hyper-v.txtfor /f %%i in (&#39;findstr /i . hyper-v.txt 2^&gt;nul&#39;) do dism /online /norestart /add-package:&quot;%SystemRoot%\servicing\Packages\%%i&quot;del hyper-v.txtDism /online /enable-feature /featurename:Microsoft-Hyper-V -All /LimitAccess /ALLdir /b %SystemRoot%\servicing\Packages\*containers*.mum &gt;containers.txtfor /f %%i in (&#39;findstr /i . containers.txt 2^&gt;nul&#39;) do dism /online /norestart /add-package:&quot;%SystemRoot%\servicing\Packages\%%i&quot;del containers.txtDism /online /enable-feature /featurename:Containers -All /LimitAccess /ALL%</code></pre><p>保存成一个cmd扩展名的文件，<a href="/2020/02/18/ru-he-zai-windows-10-jia-ting-ban-an-zhuang-docker-for-windows/hyperv-and-containers.cmd">鼠标右键点这里保存</a> 然后用管理员账号执行，会自动下载hyper-V和container相关组件安装。</p><p>安装完会要求重启电脑。</p><p>重启完电脑，在搜索框里敲“启用或关闭Windows功能”，抱歉我不知道在控制面板里怎么找到这项。会起一个对话框，把Hyper-V和容器相关打勾选上。</p><p>然后再修改注册表来冒充自己是专业版</p><pre><code>REG ADD &quot;HKEY_LOCAL_MACHINE\software\Microsoft\Windows NT\CurrentVersion&quot; /v EditionId /T REG_EXPAND_SZ /d Professional /F</code></pre><p>有人的电脑还要去BIOS打开Virtualization，我的默认打开了，不需要这一步。</p><p>下载Docker for Windows installer，安装，完成。</p><p><img src="/2020/02/18/ru-he-zai-windows-10-jia-ting-ban-an-zhuang-docker-for-windows/DockerOnWindows10HomeEdition.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Windows系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> Docker </tag>
            
            <tag> Hack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux的新硬件支持依然是个大坑</title>
      <link href="/2020/02/15/linux-de-xin-ying-jian-zhi-chi-yi-ran-shi-ge-da-keng/"/>
      <url>/2020/02/15/linux-de-xin-ying-jian-zhi-chi-yi-ran-shi-ge-da-keng/</url>
      
        <content type="html"><![CDATA[<p>最近需要在Linux系统上操练一些事，自己的14mid的MBP说实话并不慢，但是毕竟硬盘内存都不能放手去鼓捣，想干脆买台新电脑算了。这种专用的电脑自然没必要买笔记本，性价比不高。就随便在jd上找了一台所谓的工作站，512G SSD+1T，32G内存，一段时间内足够用了。</p><p>疫情原因，电脑送来略迟一两天。送来了，发现标配没有DP线。又下单DP线，这个倒快，第二天就送到了。</p><p>电脑自然奉送Win10家庭版。我还是要用Linux。Ubuntu，20.04 daily，还差2个月release，拿来用应该没大问题。</p><p>Windows里缩小原来的分区，给Linux留空间，然后拿U盘安装双系统，分区要选手动，结果发现只找到一个机械硬盘。这样最后grub会安装失败，系统启动不了。</p><p><img src="/2020/02/15/linux-de-xin-ying-jian-zhi-chi-yi-ran-shi-ge-da-keng/grub-failure.jpeg" alt=""></p><p>Google，发现原来NVME的SSD要改BIOS，把RAID改成AHCI。还要Windows切安全模式再切回来。</p><p>改好，顺便把BIOS再改的更顺手些，把Legacy打开，关Security Boot。</p><p>再装，在分区前出了一个对话框，提示了6个？</p><p><img src="/2020/02/15/linux-de-xin-ying-jian-zhi-chi-yi-ran-shi-ge-da-keng/questionsmark.jpeg" alt=""></p><p>再Google，发现前人已经遇到类似问题，各种技巧，启动的时候要改启动命令行，加 nvme_load=YES，改。</p><p>改了，还不行，各种Google，Dell网站上面的知识库明显是机器翻译的，矛盾，而且过时了。</p><p>最后求教Canonical的老同事，得知这个Intel SSD的RAID和Linux AHCI不兼容，暂时没有办法装双系统，如果只装Ubuntu需要gpartd格式化硬盘。</p><p>再观察一下，先拿VirtualBox顶一下，怎么说8核i7加32G内存的机器，分给VirtualBox一半也还不算弱。</p><p>只是没想到，2020年了Linux的硬件兼容性还是要提前考虑的问题！</p>]]></content>
      
      
      <categories>
          
          <category> Linux系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> Hardware </tag>
            
            <tag> Compatibility </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/02/11/hello-world/"/>
      <url>/2020/02/11/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
